// Code generated by Stan version 2.11

#include <stan/model/model_header.hpp>

namespace zip_count_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
inline
typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T_lp__>::type>::type
count_series_lp(const std::vector<int>& y,
                    const std::vector<int>& off,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coef,
                    const T3__& alpha,
                    const T4__& beta,
                    const T5__& gamma,
                    const T6__& eta,
                    const T7__& phi, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T_lp__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ lp;
            (void) lp;  // dummy to suppress unused var warning
            int Y(0);
            (void) Y;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(size(y)));
            (void) mu;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  omega(static_cast<Eigen::VectorXd::Index>(size(y)));
            (void) omega;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  theta(static_cast<Eigen::VectorXd::Index>(size(y)));
            (void) theta;  // dummy to suppress unused var warning
            vector<int> value(size(y), 0);
            stan::math::initialize(lp, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(omega, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(theta, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 13;
            stan::math::assign(Y, size(y));
            current_statement_begin__ = 15;
            for (int i = 1; i <= Y; ++i) {
                current_statement_begin__ = 16;
                if (as_bool(logical_eq(get_base1(y,i,"y",1),0))) {
                    current_statement_begin__ = 17;
                    stan::math::assign(get_base1_lhs(value,i,"value",1), 1);
                } else {
                    current_statement_begin__ = 19;
                    stan::math::assign(get_base1_lhs(value,i,"value",1), 0);
                }
            }
            current_statement_begin__ = 23;
            stan::math::assign(get_base1_lhs(omega,1,"omega",1), phi);
            current_statement_begin__ = 24;
            for (int i = 2; i <= Y; ++i) {
                current_statement_begin__ = 25;
                stan::math::assign(get_base1_lhs(omega,i,"omega",1), exp((get_base1(coef,1,"coef",1) + (get_base1(coef,2,"coef",1) * i))));
            }
            current_statement_begin__ = 29;
            stan::math::assign(get_base1_lhs(mu,1,"mu",1), get_base1(omega,1,"omega",1));
            current_statement_begin__ = 30;
            for (int i = 2; i <= Y; ++i) {
                current_statement_begin__ = 31;
                stan::math::assign(get_base1_lhs(mu,i,"mu",1), ((get_base1(omega,i,"omega",1) + (alpha * get_base1(y,(i - 1),"y",1))) + (beta * get_base1(mu,(i - 1),"mu",1))));
            }
            current_statement_begin__ = 35;
            stan::math::assign(get_base1_lhs(theta,1,"theta",1), 0);
            current_statement_begin__ = 36;
            for (int i = 2; i <= Y; ++i) {
                current_statement_begin__ = 37;
                stan::math::assign(get_base1_lhs(theta,i,"theta",1), ((get_base1(value,(i - 1),"value",1) * gamma) + ((1 - get_base1(value,(i - 1),"value",1)) * eta)));
            }
            current_statement_begin__ = 40;
            stan::math::assign(lp, 0);
            current_statement_begin__ = 41;
            for (int i = 1; i <= Y; ++i) {
                current_statement_begin__ = 42;
                if (as_bool(logical_eq(get_base1(y,i,"y",1),0))) {
                    current_statement_begin__ = 43;
                    stan::math::assign(lp, (lp + log_sum_exp(bernoulli_log(1,get_base1(theta,i,"theta",1)),(bernoulli_log(0,get_base1(theta,i,"theta",1)) + poisson_log(get_base1(y,i,"y",1),((get_base1(off,i,"off",1) + 1) * get_base1(mu,i,"mu",1)))))));
                } else {
                    current_statement_begin__ = 47;
                    stan::math::assign(lp, (lp + (bernoulli_log(0,get_base1(theta,i,"theta",1)) + poisson_log(get_base1(y,i,"y",1),((get_base1(off,i,"off",1) + 1) * get_base1(mu,i,"mu",1))))));
                }
            }
            current_statement_begin__ = 51;
            return stan::math::promote_scalar<fun_return_scalar_t__>(lp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct count_series_lp_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
    inline
    typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T_lp__>::type>::type
    operator()(const std::vector<int>& y,
                    const std::vector<int>& off,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& coef,
                    const T3__& alpha,
                    const T4__& beta,
                    const T5__& gamma,
                    const T6__& eta,
                    const T7__& phi, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return count_series_lp(y, off, coef, alpha, beta, gamma, eta, phi, lp__, lp_accum__, pstream__);
    }
};

class zip_count_model : public prob_grad {
private:
    int N;
    int P;
    vector<int> str;
    vector<int> end;
    vector<vector<int> > counts;
    vector<vector<int> > off;
public:
    zip_count_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    zip_count_model(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "zip_count_model_namespace::zip_count_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "P", "int", context__.to_vec());
        P = int(0);
        vals_i__ = context__.vals_i("P");
        pos__ = 0;
        P = vals_i__[pos__++];
        context__.validate_dims("data initialization", "str", "int", context__.to_vec(P));
        validate_non_negative_index("str", "P", P);
        str = std::vector<int>(P,int(0));
        vals_i__ = context__.vals_i("str");
        pos__ = 0;
        size_t str_limit_0__ = P;
        for (size_t i_0__ = 0; i_0__ < str_limit_0__; ++i_0__) {
            str[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "end", "int", context__.to_vec(P));
        validate_non_negative_index("end", "P", P);
        end = std::vector<int>(P,int(0));
        vals_i__ = context__.vals_i("end");
        pos__ = 0;
        size_t end_limit_0__ = P;
        for (size_t i_0__ = 0; i_0__ < end_limit_0__; ++i_0__) {
            end[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "counts", "int", context__.to_vec(P,N));
        validate_non_negative_index("counts", "P", P);
        validate_non_negative_index("counts", "N", N);
        counts = std::vector<std::vector<int> >(P,std::vector<int>(N,int(0)));
        vals_i__ = context__.vals_i("counts");
        pos__ = 0;
        size_t counts_limit_1__ = N;
        for (size_t i_1__ = 0; i_1__ < counts_limit_1__; ++i_1__) {
            size_t counts_limit_0__ = P;
            for (size_t i_0__ = 0; i_0__ < counts_limit_0__; ++i_0__) {
                counts[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "off", "int", context__.to_vec(P,N));
        validate_non_negative_index("off", "P", P);
        validate_non_negative_index("off", "N", N);
        off = std::vector<std::vector<int> >(P,std::vector<int>(N,int(0)));
        vals_i__ = context__.vals_i("off");
        pos__ = 0;
        size_t off_limit_1__ = N;
        for (size_t i_1__ = 0; i_1__ < off_limit_1__; ++i_1__) {
            size_t off_limit_0__ = P;
            for (size_t i_0__ = 0; i_0__ < off_limit_0__; ++i_0__) {
                off[i_0__][i_1__] = vals_i__[pos__++];
            }
        }

        // validate data
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"P",P,0);
        for (int k0__ = 0; k0__ < P; ++k0__) {
            check_greater_or_equal(function__,"str[k0__]",str[k0__],0);
        }
        for (int k0__ = 0; k0__ < P; ++k0__) {
            check_greater_or_equal(function__,"end[k0__]",end[k0__],0);
        }
        for (int k0__ = 0; k0__ < P; ++k0__) {
            for (int k1__ = 0; k1__ < N; ++k1__) {
                check_greater_or_equal(function__,"counts[k0__][k1__]",counts[k0__][k1__],0);
            }
        }
        for (int k0__ = 0; k0__ < P; ++k0__) {
            for (int k1__ = 0; k1__ < N; ++k1__) {
                check_greater_or_equal(function__,"off[k0__][k1__]",off[k0__][k1__],0);
            }
        }

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += 2 * P;
        num_params_r__ += 2;
        num_params_r__ += ((2 * (2 - 1)) / 2);
        num_params_r__ += 2;
        num_params_r__ += P;
        num_params_r__ += P;
        num_params_r__ += P;
        num_params_r__ += P;
        num_params_r__ += P;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~zip_count_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("coef")))
            throw std::runtime_error("variable coef missing");
        vals_r__ = context__.vals_r("coef");
        pos__ = 0U;
        context__.validate_dims("initialization", "coef", "vector_d", context__.to_vec(P,2));
        std::vector<vector_d> coef(P,vector_d(static_cast<Eigen::VectorXd::Index>(2)));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            for (int i0__ = 0U; i0__ < P; ++i0__)
                coef[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < P; ++i0__)
            try {
            writer__.vector_unconstrain(coef[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable coef: ") + e.what());
        }

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu", "vector_d", context__.to_vec(2));
        vector_d mu(static_cast<Eigen::VectorXd::Index>(2));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            mu(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("Omega")))
            throw std::runtime_error("variable Omega missing");
        vals_r__ = context__.vals_r("Omega");
        pos__ = 0U;
        context__.validate_dims("initialization", "Omega", "matrix_d", context__.to_vec(2,2));
        matrix_d Omega(static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2));
        for (int j2__ = 0U; j2__ < 2; ++j2__)
            for (int j1__ = 0U; j1__ < 2; ++j1__)
                Omega(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.corr_matrix_unconstrain(Omega);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Omega: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "vector_d", context__.to_vec(2));
        vector_d sigma(static_cast<Eigen::VectorXd::Index>(2));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec(P));
        std::vector<double> alpha(P,double(0));
        for (int i0__ = 0U; i0__ < P; ++i0__)
            alpha[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < P; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,alpha[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("beta_unc")))
            throw std::runtime_error("variable beta_unc missing");
        vals_r__ = context__.vals_r("beta_unc");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_unc", "double", context__.to_vec(P));
        std::vector<double> beta_unc(P,double(0));
        for (int i0__ = 0U; i0__ < P; ++i0__)
            beta_unc[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < P; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,beta_unc[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_unc: ") + e.what());
        }

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma", "double", context__.to_vec(P));
        std::vector<double> gamma(P,double(0));
        for (int i0__ = 0U; i0__ < P; ++i0__)
            gamma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < P; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,gamma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("eta")))
            throw std::runtime_error("variable eta missing");
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        context__.validate_dims("initialization", "eta", "double", context__.to_vec(P));
        std::vector<double> eta(P,double(0));
        for (int i0__ = 0U; i0__ < P; ++i0__)
            eta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < P; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,eta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable eta: ") + e.what());
        }

        if (!(context__.contains_r("phi")))
            throw std::runtime_error("variable phi missing");
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "phi", "double", context__.to_vec(P));
        std::vector<double> phi(P,double(0));
        for (int i0__ = 0U; i0__ < P; ++i0__)
            phi[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < P; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,phi[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable phi: ") + e.what());
        }

        if (!(context__.contains_r("mu_phi")))
            throw std::runtime_error("variable mu_phi missing");
        vals_r__ = context__.vals_r("mu_phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_phi", "double", context__.to_vec());
        double mu_phi(0);
        mu_phi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_phi: ") + e.what());
        }

        if (!(context__.contains_r("sigma_phi")))
            throw std::runtime_error("variable sigma_phi missing");
        vals_r__ = context__.vals_r("sigma_phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_phi", "double", context__.to_vec());
        double sigma_phi(0);
        sigma_phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_phi: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > coef;
        size_t dim_coef_0__ = P;
        coef.reserve(dim_coef_0__);
        for (size_t k_0__ = 0; k_0__ < dim_coef_0__; ++k_0__) {
            if (jacobian__)
                coef.push_back(in__.vector_constrain(2,lp__));
            else
                coef.push_back(in__.vector_constrain(2));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  mu;
        (void) mu;  // dummy to suppress unused var warning
        if (jacobian__)
            mu = in__.vector_constrain(2,lp__);
        else
            mu = in__.vector_constrain(2);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Omega;
        (void) Omega;  // dummy to suppress unused var warning
        if (jacobian__)
            Omega = in__.corr_matrix_constrain(2,lp__);
        else
            Omega = in__.corr_matrix_constrain(2);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma;
        (void) sigma;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.vector_lb_constrain(0,2,lp__);
        else
            sigma = in__.vector_lb_constrain(0,2);

        vector<T__> alpha;
        size_t dim_alpha_0__ = P;
        alpha.reserve(dim_alpha_0__);
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            if (jacobian__)
                alpha.push_back(in__.scalar_lub_constrain(0,1,lp__));
            else
                alpha.push_back(in__.scalar_lub_constrain(0,1));
        }

        vector<T__> beta_unc;
        size_t dim_beta_unc_0__ = P;
        beta_unc.reserve(dim_beta_unc_0__);
        for (size_t k_0__ = 0; k_0__ < dim_beta_unc_0__; ++k_0__) {
            if (jacobian__)
                beta_unc.push_back(in__.scalar_lub_constrain(0,1,lp__));
            else
                beta_unc.push_back(in__.scalar_lub_constrain(0,1));
        }

        vector<T__> gamma;
        size_t dim_gamma_0__ = P;
        gamma.reserve(dim_gamma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            if (jacobian__)
                gamma.push_back(in__.scalar_lub_constrain(0,1,lp__));
            else
                gamma.push_back(in__.scalar_lub_constrain(0,1));
        }

        vector<T__> eta;
        size_t dim_eta_0__ = P;
        eta.reserve(dim_eta_0__);
        for (size_t k_0__ = 0; k_0__ < dim_eta_0__; ++k_0__) {
            if (jacobian__)
                eta.push_back(in__.scalar_lub_constrain(0,1,lp__));
            else
                eta.push_back(in__.scalar_lub_constrain(0,1));
        }

        vector<T__> phi;
        size_t dim_phi_0__ = P;
        phi.reserve(dim_phi_0__);
        for (size_t k_0__ = 0; k_0__ < dim_phi_0__; ++k_0__) {
            if (jacobian__)
                phi.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                phi.push_back(in__.scalar_lb_constrain(0));
        }

        T__ mu_phi;
        (void) mu_phi;  // dummy to suppress unused var warning
        if (jacobian__)
            mu_phi = in__.scalar_constrain(lp__);
        else
            mu_phi = in__.scalar_constrain();

        T__ sigma_phi;
        (void) sigma_phi;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma_phi = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_phi = in__.scalar_lb_constrain(0);


        // transformed parameters
        vector<T__> beta(P);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Sigma(static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2));
        (void) Sigma;  // dummy to suppress unused var warning

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(beta,DUMMY_VAR__);
        stan::math::fill(Sigma,DUMMY_VAR__);

        try {
            current_statement_begin__ = 80;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 81;
                stan::math::assign(get_base1_lhs(beta,p,"beta",1), ((1 - get_base1(alpha,p,"alpha",1)) * get_base1(beta_unc,p,"beta_unc",1)));
            }
            current_statement_begin__ = 84;
            stan::math::assign(Sigma, quad_form_diag(Omega,sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < P; ++i0__) {
            if (stan::math::is_uninitialized(beta[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < 2; ++i0__) {
            for (int i1__ = 0; i1__ < 2; ++i1__) {
                if (stan::math::is_uninitialized(Sigma(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Sigma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        for (int k0__ = 0; k0__ < P; ++k0__) {
            check_greater_or_equal(function__,"beta[k0__]",beta[k0__],0);
            check_less_or_equal(function__,"beta[k0__]",beta[k0__],1);
        }
        stan::math::check_cov_matrix(function__,"Sigma",Sigma);

        // model body
        try {
            current_statement_begin__ = 87;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 88;
                lp_accum__.add(beta_log<propto__>(get_base1(alpha,p,"alpha",1), 1, 3));
                current_statement_begin__ = 89;
                lp_accum__.add(beta_log<propto__>(get_base1(beta_unc,p,"beta_unc",1), 1, 3));
            }
            current_statement_begin__ = 92;
            lp_accum__.add(lognormal_log<propto__>(phi, mu_phi, sigma_phi));
            current_statement_begin__ = 93;
            lp_accum__.add(normal_log<propto__>(mu_phi, 0, 1));
            current_statement_begin__ = 94;
            lp_accum__.add(cauchy_log<propto__>(sigma_phi, 0, 1));
            current_statement_begin__ = 96;
            lp_accum__.add(lkj_corr_log<propto__>(Omega, 2));
            current_statement_begin__ = 97;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 98;
            lp_accum__.add(normal_log<propto__>(get_base1(mu,1,"mu",1), 0, 5));
            current_statement_begin__ = 99;
            lp_accum__.add(normal_log<propto__>(get_base1(mu,2,"mu",1), 0, 1));
            current_statement_begin__ = 100;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 101;
                lp_accum__.add(multi_normal_log<propto__>(get_base1(coef,p,"coef",1), mu, Sigma));
            }
            current_statement_begin__ = 104;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 105;
                lp_accum__.add(count_series_lp(stan::model::rvalue(get_base1(counts,p,"counts",1), stan::model::cons_list(stan::model::index_min_max(get_base1(str,p,"str",1), get_base1(end,p,"end",1)), stan::model::nil_index_list()), "counts[p]"),stan::model::rvalue(get_base1(off,p,"off",1), stan::model::cons_list(stan::model::index_min_max(get_base1(str,p,"str",1), get_base1(end,p,"end",1)), stan::model::nil_index_list()), "off[p]"),get_base1(coef,p,"coef",1),get_base1(alpha,p,"alpha",1),get_base1(beta,p,"beta",1),get_base1(gamma,p,"gamma",1),get_base1(eta,p,"eta",1),get_base1(phi,p,"phi",1), lp__, lp_accum__, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("coef");
        names__.push_back("mu");
        names__.push_back("Omega");
        names__.push_back("sigma");
        names__.push_back("alpha");
        names__.push_back("beta_unc");
        names__.push_back("gamma");
        names__.push_back("eta");
        names__.push_back("phi");
        names__.push_back("mu_phi");
        names__.push_back("sigma_phi");
        names__.push_back("beta");
        names__.push_back("Sigma");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "zip_count_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<vector_d> coef;
        size_t dim_coef_0__ = P;
        for (size_t k_0__ = 0; k_0__ < dim_coef_0__; ++k_0__) {
            coef.push_back(in__.vector_constrain(2));
        }
        vector_d mu = in__.vector_constrain(2);
        matrix_d Omega = in__.corr_matrix_constrain(2);
        vector_d sigma = in__.vector_lb_constrain(0,2);
        vector<double> alpha;
        size_t dim_alpha_0__ = P;
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            alpha.push_back(in__.scalar_lub_constrain(0,1));
        }
        vector<double> beta_unc;
        size_t dim_beta_unc_0__ = P;
        for (size_t k_0__ = 0; k_0__ < dim_beta_unc_0__; ++k_0__) {
            beta_unc.push_back(in__.scalar_lub_constrain(0,1));
        }
        vector<double> gamma;
        size_t dim_gamma_0__ = P;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_0__; ++k_0__) {
            gamma.push_back(in__.scalar_lub_constrain(0,1));
        }
        vector<double> eta;
        size_t dim_eta_0__ = P;
        for (size_t k_0__ = 0; k_0__ < dim_eta_0__; ++k_0__) {
            eta.push_back(in__.scalar_lub_constrain(0,1));
        }
        vector<double> phi;
        size_t dim_phi_0__ = P;
        for (size_t k_0__ = 0; k_0__ < dim_phi_0__; ++k_0__) {
            phi.push_back(in__.scalar_lb_constrain(0));
        }
        double mu_phi = in__.scalar_constrain();
        double sigma_phi = in__.scalar_lb_constrain(0);
        for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
            for (int k_0__ = 0; k_0__ < P; ++k_0__) {
                vars__.push_back(coef[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
            for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
                vars__.push_back(Omega(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < P; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < P; ++k_0__) {
            vars__.push_back(beta_unc[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < P; ++k_0__) {
            vars__.push_back(gamma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < P; ++k_0__) {
            vars__.push_back(eta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < P; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        vars__.push_back(mu_phi);
        vars__.push_back(sigma_phi);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector<double> beta(P, 0.0);
        matrix_d Sigma(static_cast<Eigen::VectorXd::Index>(2),static_cast<Eigen::VectorXd::Index>(2));
        (void) Sigma;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 80;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 81;
                stan::math::assign(get_base1_lhs(beta,p,"beta",1), ((1 - get_base1(alpha,p,"alpha",1)) * get_base1(beta_unc,p,"beta_unc",1)));
            }
            current_statement_begin__ = 84;
            stan::math::assign(Sigma, quad_form_diag(Omega,sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int k0__ = 0; k0__ < P; ++k0__) {
            check_greater_or_equal(function__,"beta[k0__]",beta[k0__],0);
            check_less_or_equal(function__,"beta[k0__]",beta[k0__],1);
        }
        stan::math::check_cov_matrix(function__,"Sigma",Sigma);

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < P; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
            for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
                vars__.push_back(Sigma(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "zip_count_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "coef" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_unc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_phi";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "coef" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((2 * (2 - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Omega" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_unc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_phi";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= P; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (2 + ((2 * (2 - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef zip_count_model_namespace::zip_count_model stan_model;

